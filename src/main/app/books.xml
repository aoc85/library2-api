<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="CE-3.9.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd 
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
	<db:template-query name="books_id" doc:name="Template Query">
       <db:parameterized-query><![CDATA[select * from books where id = :id]]></db:parameterized-query>
       <db:in-param name="id" type="INTEGER" defaultValue="1"/>
   	</db:template-query>
   	<db:template-query name="DeleteBook" doc:name="Template Query">
       <db:parameterized-query><![CDATA[delete from books where id = :id]]></db:parameterized-query>
       <db:in-param name="id" type="INTEGER" defaultValue="0"/>
   	</db:template-query>
   	
   <flow name="get:/books/{bookId}:library-api-config">
       <db:select config-ref="MySQL_Configuration" doc:name="Database">
           <db:template-query-ref name="books_id"/>
           <db:in-param name="id" type="INTEGER" value="#[flowVars.bookId]"/>
       </db:select>
       <validation:validate-size exceptionClass="org.mule.module.apikit.exception.NotFoundException" value="#[payload]" min="1" doc:name="Validation"/>
       <set-payload value="#[payload.get(0)]" doc:name="Set Payload"/>
   </flow>

	<flow name="put:/books/{bookId}:application/json:library-api-config">
        <db:update config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[update books 
	set title = #[json:/title],
		category = #[json:/category],
		isbn = #[json:/isbn],
		publisher = #[json:/publisher],
		author = #[json:/author]
	where
	 id = #[flowVars.bookId]]]></db:parameterized-query>
        </db:update>
        <validation:is-not-null message="404" exceptionClass="org.mule.module.apikit.exception.NotFoundException" value="#[payload]" doc:name="Validation"/>
        <set-payload value="{&#xA;  &quot;code&quot; : 1009,&#xA;  &quot;message&quot; : &quot;Recurso não encontrado&quot;,&#xA;  &quot;description&quot; : &quot;Aqui vão os detalhes do erro&quot;&#xA;}" doc:name="Set Payload"/>
    </flow>
    <flow name="delete:/books/{bookId}:library-api-config">
        <db:delete config-ref="MySQL_Configuration" doc:name="Database">
            <db:template-query-ref name="DeleteBook"/>
            <db:in-param name="id" type="INTEGER" value="#[flowVars.bookId]"/>
        </db:delete>
        <validation:is-true message="404" exceptionClass="org.mule.module.apikit.exception.NotFoundException" expression="#[payload != false]" doc:name="Validation"/>
        <set-payload value="{&#xA;  &quot;code&quot; : 1001,&#xA;  &quot;message&quot; : &quot;Ocorreu um erro no servidor&quot;,&#xA;  &quot;description&quot; : &quot;Aqui vão os detalhes do erro&quot;&#xA;}" doc:name="Set Payload"/>
    </flow>
    <flow name="get:/books:library-api-config">
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties['http.query.params'].sortDirection =='asc']">
                <db:select config-ref="MySQL_Configuration" doc:name="order asc">
                    <db:parameterized-query><![CDATA[select * from books order by title asc]]></db:parameterized-query>
                </db:select>
            </when>
            <when expression="#[message.inboundProperties['http.query.params'].sortDirection =='desc']">
                <db:select config-ref="MySQL_Configuration" doc:name="order desc">
                    <db:parameterized-query><![CDATA[select * from books order by title desc]]></db:parameterized-query>
                </db:select>
            </when>
            <otherwise>
                <db:select config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[select * from books]]></db:parameterized-query>
                </db:select>
            </otherwise>
        </choice>
        <set-payload value="#[payload]" doc:name="Set Payload"/>
    </flow>
    <flow name="post:/books:application/json:library-api-config">
        <db:insert config-ref="MySQL_Configuration" doc:name="Database" autoGeneratedKeys="true">
            <db:parameterized-query><![CDATA[insert into books
	(title, category, isbn, publisher, author)
values
	 (#[json:/title], #[json:/category], #[json:/isbn], #[json:/publisher], #[json:/author])]]></db:parameterized-query>
        </db:insert>
        <set-property doc:name="Set Header" propertyName="Location" value="http://localhost:${http.port}/api/books/#[payload.get(0).get(&quot;GENERATED_KEY&quot;)]"/>        
    </flow>
</mule>
